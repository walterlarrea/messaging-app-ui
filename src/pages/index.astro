---
import '../styles/main.css'
import Layout from '../layouts/Layout.astro'
import Button from '../components/atoms/Button/Button'
import Login from '../components/organisms/Login/Login'
import Input from '../components/atoms/Input/Input'
---

<Layout title="FB Messaging">
	<div class="grid_container gap-[10px] sm:gap-0 h-fit sm:h-full sm:p-[16px]">
		<section class="justify-self-end">
			<Login classes="max-w-fit" client:only="react" />
		</section>

		<section class="flex items-center justify-center">
			<form
				class="flex flex-col w-full sm:max-w-md p-[15px] border-2 border-[--border] rounded-[20px] bg-[--background]"
				id="register-form"
				novalidate
			>
				<Input classes="ms-4 mb-4" id="email" name="email" type="email">
					E-mail
				</Input>

				<Input classes="ms-4 mb-4" id="username" name="username" type="text">
					Username
				</Input>

				<Input classes="ms-4 mb-4" id="firstname" name="first_name" type="text">
					Name
				</Input>

				<Input classes="ms-4 mb-4" id="lastname" name="last_name" type="text">
					Last name
				</Input>

				<Input
					classes="ms-4 mb-4"
					id="password"
					name="password"
					type="password"
				>
					Password
				</Input>

				<Input
					classes="ms-4 mb-4"
					id="passwordconfirm"
					name="password_confirm"
					type="password"
				>
					Repeat password
				</Input>

				<Button classes="w-32 self-end" type="submit">Sign up</Button>
			</form>
		</section>
	</div>
</Layout>

<script>
	import { registerNewUser } from '../services/authService'
	import { toast } from 'react-toastify'
	import type { TUserRegister } from '../types/users'
	import type { TApiErrors } from '../types/error'
	import * as Yup from 'yup'

	const { object, string } = Yup

	const signUpSchema = object().shape({
		password_confirm: string()
			.ensure()
			.when('password', {
				is: (password: string, password_confirm: string) =>
					password && password.length > 0,
				then: () =>
					string().oneOf([Yup.ref('password'), null], 'Passwords must match'),
			})
			.required('Password confirmation is required'),
		password: string()
			.matches(
				/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,30}$/,
				'Password must have one uppercase, one lowercase, and one numeric digit'
			)
			.required('A password is required'),
		last_name: string()
			.min(3, 'Lastname must be between 3 and 25 characters')
			.max(25, 'Lastname must be between 3 and 25 characters'),
		first_name: string()
			.required('Your name is a required field')
			.min(3, 'Name must be between 3 and 20 characters')
			.max(20, 'Name must be between 3 and 20 characters'),
		username: string()
			.required('Username is a required field')
			.min(5, 'Username must be between 5 and 25 characters')
			.max(25, 'Username must be between 5 and 25 characters'),
		email: string()
			.matches(
				/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.([a-zA-Z]){2,3}$/,
				'E-mail is not valid'
			)
			.email()
			.required('E-mail is required')
			.max(60),
	})

	const registerForm = document.getElementById(
		'register-form'
	) as HTMLFormElement

	registerForm.addEventListener('submit', async (e: SubmitEvent) => {
		e.preventDefault()
		const form = e.target as HTMLFormElement

		const dataList = new FormData(form) as FormData
		const dataObject: TUserRegister = {
			email: dataList.get('email') as string,
			username: dataList.get('username') as string,
			first_name: dataList.get('first_name') as string,
			last_name: dataList.get('last_name') as string,
			password: dataList.get('password') as string,
			password_confirm: dataList.get('password_confirm') as string,
		}

		const validation = await signUpSchema
			.validate(dataObject, { abortEarly: false })
			.then((res) => res)
			.catch((err) => err)

		if (!validation.email) {
			validation.inner.map((v) => toast.error(v.message))
			return
		}

		registerNewUser(dataObject)
			.then((result) => {
				form.reset()
				toast.success('User registered')
			})
			.catch((error: TApiErrors) => {
				const message = error?.errors?.[0]
					? error?.errors?.[0].msg
					: 'An unknown error occur'
				toast.error(message)
			})
	})
</script>

<style>
	.grid_container {
		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: min-content auto;
	}
</style>
